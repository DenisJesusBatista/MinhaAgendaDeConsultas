// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MinhaAgendaDeConsultas.Infraestrutura.Migrations
{
    [DbContext(typeof(MinhaAgendaDeConsultasContext))]
    [Migration("20250208003151_Teste2")]
    partial class Teste2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.AgendamentoConsultas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Aceite")
                        .HasColumnType("boolean");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataHoraFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataHoraInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MedicoId")
                        .HasColumnType("bigint");

                    b.Property<long>("PacienteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.ToTable("AgendamentoConsultas", (string)null);
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.EntidadeBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("EntidadeBase");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.Medico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioMedico", (string)null);
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.Paciente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioPaciente", (string)null);
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("Identificador")
                        .HasColumnType("uuid");

                    b.Property<string>("IdentificadorString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.AgendaMedica", b =>
                {
                    b.HasBaseType("MinhaAgendaDeConsultas.Domain.Entidades.EntidadeBase");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDisponivel")
                        .HasColumnType("boolean");

                    b.Property<long>("MedicoId")
                        .HasColumnType("bigint");

                    b.ToTable("AgendaMedica", (string)null);
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.HorarioDisponivel", b =>
                {
                    b.HasBaseType("MinhaAgendaDeConsultas.Domain.Entidades.EntidadeBase");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Disponivel")
                        .HasColumnType("boolean");

                    b.Property<long?>("MedicoId")
                        .HasColumnType("bigint");

                    b.HasIndex("MedicoId");

                    b.ToTable("HorarioDisponivel");
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.Medico", b =>
                {
                    b.HasOne("MinhaAgendaDeConsultas.Domain.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.Paciente", b =>
                {
                    b.HasOne("MinhaAgendaDeConsultas.Domain.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.RefreshToken", b =>
                {
                    b.HasOne("MinhaAgendaDeConsultas.Domain.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.AgendaMedica", b =>
                {
                    b.HasOne("MinhaAgendaDeConsultas.Domain.Entidades.EntidadeBase", null)
                        .WithOne()
                        .HasForeignKey("MinhaAgendaDeConsultas.Domain.Entidades.AgendaMedica", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.HorarioDisponivel", b =>
                {
                    b.HasOne("MinhaAgendaDeConsultas.Domain.Entidades.EntidadeBase", null)
                        .WithOne()
                        .HasForeignKey("MinhaAgendaDeConsultas.Domain.Entidades.HorarioDisponivel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinhaAgendaDeConsultas.Domain.Entidades.Medico", null)
                        .WithMany("HorariosDisponiveis")
                        .HasForeignKey("MedicoId");
                });

            modelBuilder.Entity("MinhaAgendaDeConsultas.Domain.Entidades.Medico", b =>
                {
                    b.Navigation("HorariosDisponiveis");
                });
#pragma warning restore 612, 618
        }
    }
}
